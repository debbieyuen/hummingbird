//
//  MessagesViewController.swift
//  DALLE2 MessagesExtension
//
//  Created by Debbie Yuen on 11/14/22.
//

import UIKit
import Messages
import SwiftUI

let url = URL(string: "https://api.openai.com/v1/images/generations")!
let OPENAI_API_KEY = "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"
//let searchController = UISearchController()


class MessagesViewController: MSMessagesAppViewController {
    @IBOutlet weak var imageOne: UIImageView!
    @IBOutlet weak var imageTwo: UIImageView!
    @IBOutlet weak var imageThree: UIImageView!
    @IBOutlet weak var dalleSearchBar: UISearchBar!
    @IBOutlet weak var pictureCollectionView: UICollectionView!
    
    
//
//    var pictureCollectionAll = [String]()
//
    // Stores all DALL-E images
    @State var images = [dalleimages]()
    @AppStorage("query") var query: String = ""
    
    
    
    //DallE Functions
    func dalle(prompt: String, n: Int64) {
        
        var request = URLRequest(url: url)
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer " + OPENAI_API_KEY, forHTTPHeaderField: "Authorization")
        
        // HTTP Post Requests: https://developer.apple.com/forums/thread/666662
        let body: [String: Any?] = ["prompt": prompt, "n": n, "size": "256x256"]
        let finalBody = try? JSONSerialization.data(withJSONObject: body)
        request.httpMethod = "POST"
        request.httpBody = finalBody
        
        //        print("the url = \(String(contentsOf: request))")
        
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            print("\(request.httpMethod!) \(request.url!)")
            print(request.allHTTPHeaderFields!)
            print(String(data: request.httpBody ?? Data(), encoding: .utf8)!)
            
            guard let response = response as? HTTPURLResponse else { return }
            
            if(response.statusCode == 400) {
                print("HTTP Request Failed \(String(describing: error))")
            }
            
            if let data = data {
                let decoder = JSONDecoder()
                var result:DallEStruct
                do{
                    result = try decoder.decode(DallEStruct.self, from: data)
//
//                imageOne: UIImageView!
//                imageTwo: UIImageView!
//                imageThree: UIImageView!
                    self.imageOne.load(urlString: result.data[0].url)
                    self.imageTwo.load(urlString: result.data[1].url)
                    self.imageThree.load(urlString: result.data[2].url)
                   
//                    for i in 0 ..< result.data.count {
//                        var r = dalleimages(url: result.data[i].url)
//                        self.images.append(r)
//                    }
                } catch {
                    print(error)
                }
                
                
                
            } else if let error = error {
                print("HTTP Request Failed \(error)")
            }
        }
        
        task.resume()
    }
    
    struct DataStruct: Decodable {
        let url: String
    }

    struct DallEStruct: Decodable {
        let created: UInt64
        let data: [DataStruct]
    }

    struct dalleimages: Identifiable {
        let id = UUID()
        var url: String
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        //navigationItem.searchController = searchController
        // Do any additional setup after loading the view.
       
//        self.dalleSearchBar.endEditing(true)
        
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}

extension MessagesViewController: UISearchBarDelegate {
        
    // function: https://developer.apple.com/documentation/uikit/uisearchbardelegate/1624301-searchbartextdidendediting
    // reference: https://github.com/salesforce-ux/design-system-ios/blob/master/Demo-Swift/slds-sample-app/SearchController.swift
    
    func searchBarSearchButtonClicked(_ searchBar : UISearchBar){
        let textPrompt = searchBar.text!
        print(textPrompt)
        if textPrompt == ""{
            return
        }
        print(textPrompt)
        dalle(prompt: textPrompt, n: 3)
        searchBar.endEditing(true)
        return
    }
    

    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
//        print(searchText)
    }
    

}

extension UIImageView {
    func load(urlString: String) {
        guard let url = URL(string: urlString)else {
            return
        }
        DispatchQueue.global().async { [weak self] in
            if let data = try? Data(contentsOf: url) {
                if let image = UIImage(data: data) {
                    DispatchQueue.main.async {
                        self?.image = image
                    }
                }
            }
        }
    }
}

